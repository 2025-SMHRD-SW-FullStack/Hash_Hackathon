package com.example.talent_link.ui.LocalLife

import android.app.Activity
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.os.bundleOf
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.example.talent_link.R
import com.example.talent_link.databinding.FragmentLocalWriteBinding
import com.example.talent_link.util.IdManager
import com.example.talent_link.util.TokenManager
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import java.io.File

class LocalWriteFragment : Fragment() {

    private var _binding: FragmentLocalWriteBinding? = null
    private val binding get() = _binding!!

    private var selectedImageUri: Uri? = null
    private lateinit var imagePickerLauncher: ActivityResultLauncher<Intent>

    companion object {
        const val REQUEST_KEY = "localWriteRequest"
        const val BUNDLE_KEY_SUCCESS = "isSuccess"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        imagePickerLauncher = registerForActivityResult(
            ActivityResultContracts.StartActivityForResult()
        ) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                selectedImageUri = result.data?.data
                selectedImageUri?.let {
                    binding.ivPreview.setImageURI(it)
                    binding.ivPreview.visibility = View.VISIBLE
                    // Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù Ïãú 'Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä' ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî Ïà®Í∏∞Í∏∞ (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
                    binding.placeholderLayout.visibility = View.GONE
                }
            }
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentLocalWriteBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // 1. Ìà¥Î∞îÏùò X Î≤ÑÌäº ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        binding.toolbar.setNavigationOnClickListener {
            requireActivity().finish() // üëà ActivityÎ•º Ï¢ÖÎ£åÌïòÎäî ÏΩîÎìúÎ°ú Î≥ÄÍ≤Ω
        }

        // 2. Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù ÏòÅÏó≠ ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï (ID ÏàòÏ†ï)
        binding.cardSelectImage.setOnClickListener {
            val intent = Intent(Intent.ACTION_PICK).apply { type = "image/*" }
            imagePickerLauncher.launch(intent)
        }

        // 3. ÌïòÎã® Îì±Î°ù Î≤ÑÌäº ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        binding.btnSubmit.setOnClickListener {
            uploadPost()
        }
    }

    private fun uploadPost() {
        val title = binding.editTitle.text.toString().trim()
        val content = binding.editContent.text.toString().trim()

        if (title.isEmpty() || content.isEmpty()) {
            Toast.makeText(requireContext(), "Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•ÌïòÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
            return
        }

        val nickname = IdManager.getNickname(requireContext()) ?: "ÏÇ¨Ïö©Ïûê"
        val address = "Ï§ëÌù•3Îèô" // TODO: Ïã§Ï†ú Ï£ºÏÜå Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        val jwt = "Bearer " + (TokenManager.getAccessToken(requireContext()) ?: "")

        // ‚ú® ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: JSONObjectÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏïàÏ†ÑÌïòÍ≤å JSON ÏÉùÏÑ±
        val jsonObject = JSONObject().apply {
            put("title", title)
            put("content", content)
            put("writerNickname", nickname)
            put("address", address)
        }
        val requestBody = jsonObject.toString().toRequestBody("application/json".toMediaTypeOrNull())

        val imagePart = selectedImageUri?.let { uri ->
            val file = File(requireContext().cacheDir, "upload.jpg").apply {
                val inputStream = requireContext().contentResolver.openInputStream(uri)
                inputStream?.use { writeBytes(it.readBytes()) }
            }
            val reqFile = file.asRequestBody("image/*".toMediaTypeOrNull())
            MultipartBody.Part.createFormData("image", file.name, reqFile)
        }

        lifecycleScope.launch {
            try {
                val response = LocalLifeRetrofitInstance.api.uploadPost(jwt, requestBody, imagePart)
                if (response.isSuccessful) {
                    Toast.makeText(requireContext(), "Í≤åÏãúÍ∏ÄÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                    // Ïù¥Ï†Ñ ÌîÑÎûòÍ∑∏Î®ºÌä∏Ïóê ÏÑ±Í≥µ Í≤∞Í≥º Ï†ÑÎã¨ -> ActivityÏóê ÏÑ±Í≥µ Í≤∞Í≥º ÏÑ§Ï†ï
                    requireActivity().setResult(Activity.RESULT_OK)
                    // popBackStack -> Activity Ï¢ÖÎ£å
                    requireActivity().finish()
                } else {
                    Toast.makeText(requireContext(), "Îì±Î°ù Ïã§Ìå®: ${response.errorBody()?.string()}", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                Toast.makeText(requireContext(), "Ïò§Î•ò Î∞úÏÉù: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}